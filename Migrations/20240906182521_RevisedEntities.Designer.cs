// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaskPlanner.API.Database;

#nullable disable

namespace TaskPlanner.API.Migrations
{
    [DbContext(typeof(PlannerDbContext))]
    [Migration("20240906182521_RevisedEntities")]
    partial class RevisedEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TaskPlanner.API.Database.Entities.CategoryEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("TaskPlanner.API.Database.Entities.GoalEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("goal_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_goals");

                    b.ToTable("goals", (string)null);
                });

            modelBuilder.Entity("TaskPlanner.API.Database.Entities.GoalMilestoneEntity", b =>
                {
                    b.Property<long>("GoalId")
                        .HasColumnType("bigint")
                        .HasColumnName("goal_id");

                    b.Property<long>("MilestoneId")
                        .HasColumnType("bigint")
                        .HasColumnName("milestone_id");

                    b.HasKey("GoalId", "MilestoneId")
                        .HasName("pk_goal_milestones");

                    b.HasIndex("MilestoneId")
                        .HasDatabaseName("ix_goal_milestones_milestone_id");

                    b.ToTable("goal_milestones", (string)null);
                });

            modelBuilder.Entity("TaskPlanner.API.Database.Entities.TaskEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("task_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int?>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("priority")
                        .HasComment("Lower number is lower priority");

                    b.HasKey("Id")
                        .HasName("pk_tasks");

                    b.ToTable("tasks", (string)null);
                });

            modelBuilder.Entity("TaskPlanner.API.Database.Entities.TaskSubtaskEntity", b =>
                {
                    b.Property<long>("TaskId")
                        .HasColumnType("bigint")
                        .HasColumnName("task_id");

                    b.Property<long>("SubtaskId")
                        .HasColumnType("bigint")
                        .HasColumnName("subtask_id");

                    b.HasKey("TaskId", "SubtaskId")
                        .HasName("pk_task_subtasks");

                    b.HasIndex("SubtaskId")
                        .HasDatabaseName("ix_task_subtasks_subtask_id");

                    b.ToTable("task_subtasks", (string)null);
                });

            modelBuilder.Entity("goal_categories", b =>
                {
                    b.Property<long>("CategoriesId")
                        .HasColumnType("bigint")
                        .HasColumnName("categories_id");

                    b.Property<long>("GoalsId")
                        .HasColumnType("bigint")
                        .HasColumnName("goals_id");

                    b.HasKey("CategoriesId", "GoalsId")
                        .HasName("pk_goal_categories");

                    b.HasIndex("GoalsId")
                        .HasDatabaseName("ix_goal_categories_goals_id");

                    b.ToTable("goal_categories", (string)null);
                });

            modelBuilder.Entity("goal_tasks", b =>
                {
                    b.Property<long>("ParentGoalsId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_goals_id");

                    b.Property<long>("TasksId")
                        .HasColumnType("bigint")
                        .HasColumnName("tasks_id");

                    b.HasKey("ParentGoalsId", "TasksId")
                        .HasName("pk_goal_tasks");

                    b.HasIndex("TasksId")
                        .HasDatabaseName("ix_goal_tasks_tasks_id");

                    b.ToTable("goal_tasks", (string)null);
                });

            modelBuilder.Entity("task_categories", b =>
                {
                    b.Property<long>("CategoriesId")
                        .HasColumnType("bigint")
                        .HasColumnName("categories_id");

                    b.Property<long>("TasksId")
                        .HasColumnType("bigint")
                        .HasColumnName("tasks_id");

                    b.HasKey("CategoriesId", "TasksId")
                        .HasName("pk_task_categories");

                    b.HasIndex("TasksId")
                        .HasDatabaseName("ix_task_categories_tasks_id");

                    b.ToTable("task_categories", (string)null);
                });

            modelBuilder.Entity("TaskPlanner.API.Database.Entities.GoalMilestoneEntity", b =>
                {
                    b.HasOne("TaskPlanner.API.Database.Entities.GoalEntity", "Goal")
                        .WithMany()
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_goal_milestones_goals_goal_id");

                    b.HasOne("TaskPlanner.API.Database.Entities.GoalEntity", "Milestone")
                        .WithMany()
                        .HasForeignKey("MilestoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_goal_milestones_goals_milestone_id");

                    b.Navigation("Goal");

                    b.Navigation("Milestone");
                });

            modelBuilder.Entity("TaskPlanner.API.Database.Entities.TaskSubtaskEntity", b =>
                {
                    b.HasOne("TaskPlanner.API.Database.Entities.TaskEntity", "Subtask")
                        .WithMany()
                        .HasForeignKey("SubtaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_subtasks_tasks_subtask_id");

                    b.HasOne("TaskPlanner.API.Database.Entities.TaskEntity", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_subtasks_tasks_task_id");

                    b.Navigation("Subtask");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("goal_categories", b =>
                {
                    b.HasOne("TaskPlanner.API.Database.Entities.CategoryEntity", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_goal_categories_categories_categories_id");

                    b.HasOne("TaskPlanner.API.Database.Entities.GoalEntity", null)
                        .WithMany()
                        .HasForeignKey("GoalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_goal_categories_goals_goals_id");
                });

            modelBuilder.Entity("goal_tasks", b =>
                {
                    b.HasOne("TaskPlanner.API.Database.Entities.GoalEntity", null)
                        .WithMany()
                        .HasForeignKey("ParentGoalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_goal_tasks_goals_parent_goals_id");

                    b.HasOne("TaskPlanner.API.Database.Entities.TaskEntity", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_goal_tasks_tasks_tasks_id");
                });

            modelBuilder.Entity("task_categories", b =>
                {
                    b.HasOne("TaskPlanner.API.Database.Entities.CategoryEntity", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_categories_categories_categories_id");

                    b.HasOne("TaskPlanner.API.Database.Entities.TaskEntity", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_categories_tasks_tasks_id");
                });
#pragma warning restore 612, 618
        }
    }
}
